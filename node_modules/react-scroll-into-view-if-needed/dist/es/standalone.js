import { createRef, createElement, PureComponent } from 'react';
import PropTypes from 'prop-types';
import scrollIntoViewIfNeeded from 'scroll-into-view-if-needed';

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);

    if (enumerableOnly) {
      symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
    }

    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}

function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

function _isNativeReflectConstruct() {
  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
  if (Reflect.construct.sham) return false;
  if (typeof Proxy === "function") return true;

  try {
    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
    return true;
  } catch (e) {
    return false;
  }
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};

  var target = _objectWithoutPropertiesLoose(source, excluded);

  var key, i;

  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }

  return target;
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _possibleConstructorReturn(self, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  }

  return _assertThisInitialized(self);
}

function _createSuper(Derived) {
  var hasNativeReflectConstruct = _isNativeReflectConstruct();

  return function _createSuperInternal() {
    var Super = _getPrototypeOf(Derived),
        result;

    if (hasNativeReflectConstruct) {
      var NewTarget = _getPrototypeOf(this).constructor;

      result = Reflect.construct(Super, arguments, NewTarget);
    } else {
      result = Super.apply(this, arguments);
    }

    return _possibleConstructorReturn(this, result);
  };
}

var ScrollIntoViewIfNeeded = /*#__PURE__*/function (_PureComponent) {
  _inherits(ScrollIntoViewIfNeeded, _PureComponent);

  var _super = _createSuper(ScrollIntoViewIfNeeded);

  function ScrollIntoViewIfNeeded() {
    var _this;

    _classCallCheck(this, ScrollIntoViewIfNeeded);

    _this = _super.call(this);

    _defineProperty(_assertThisInitialized(_this), "handleScrollIntoViewIfNeeded", function () {
      var options = _this.props.options;
      var node = _this.node.current;
      scrollIntoViewIfNeeded(node, options);
    });

    _this.node = /*#__PURE__*/createRef();
    return _this;
  }

  _createClass(ScrollIntoViewIfNeeded, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var active = this.props.active;

      if (active) {
        this.handleScrollIntoViewIfNeeded();
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(_ref) {
      var active = _ref.active;
      var isNowActive = this.props.active;

      if (!active && isNowActive) {
        this.handleScrollIntoViewIfNeeded();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props;
          _this$props.active;
          var elementType = _this$props.elementType,
          children = _this$props.children;
          _this$props.options;
          var wrapperProps = _objectWithoutProperties(_this$props, ["active", "elementType", "children", "options"]);

      return /*#__PURE__*/createElement(elementType, _objectSpread2({
        ref: this.node
      }, wrapperProps), children);
    }
  }]);

  return ScrollIntoViewIfNeeded;
}(PureComponent);
ScrollIntoViewIfNeeded.propTypes = {
  active: PropTypes.bool,
  children: PropTypes.node.isRequired,
  elementType: PropTypes.string,
  // this shape should mirror the scroll-into-view-if-needed options
  options: PropTypes.shape({
    behavior: PropTypes.oneOfType([PropTypes.oneOf(['auto', 'smooth', 'instant']), PropTypes.func]),
    block: PropTypes.oneOf(['center', 'end', 'nearest', 'start']),
    inline: PropTypes.oneOf(['center', 'end', 'nearest', 'start']),
    scrollMode: PropTypes.oneOf(['always', 'if-needed']),
    boundary: PropTypes.oneOfType([PropTypes.element, PropTypes.func]),
    skipOverflowHiddenElements: PropTypes.bool
  })
};
ScrollIntoViewIfNeeded.defaultProps = {
  active: true,
  elementType: 'div',
  options: {
    behavior: 'smooth',
    scrollMode: 'if-needed'
  }
};

export default ScrollIntoViewIfNeeded;
//# sourceMappingURL=standalone.js.map
